import {
  ComputeBudgetProgram,
  PublicKey,
  SystemProgram,
  Transaction,
  TransactionInstruction,
} from "@solana/web3.js";
import {
  createWithdrawWithheldTokensFromMintInstruction,
  getAssociatedTokenAddressSync,
  TOKEN_2022_PROGRAM_ID,
} from "@solana/spl-token";
import { SolanaAgentKit } from "../agent";
import { MEMO_PROGRAM_ID } from "../constants";
import { signTransaction, sendTransaction } from "../utils/FluxbeamClient";

const FEE_ACCOUNT = new PublicKey(
  "FEE1M4bRtos7Yi8cni9s6zpxDfZTSsARwrhqMJMLLKhv",
);

/**
 * Submit fee payment transaction
 */
export async function fluxbeamSubmitFeePayment(
  agent: SolanaAgentKit,
  quoteReq: { quote: any },
  priorityFee: number,
): Promise<string> {
  try {
    const quote = quoteReq.quote;
    // eslint-disable-next-line no-console
    console.log("buildFeeTransaction", { quoteReq, quote, priorityFee });
    const transaction = new Transaction();
    const unit_limit = 160_000;
    const unitPrice = Math.floor(priorityFee / unit_limit);

    // Add compute budget instructions
    transaction.add(
      ComputeBudgetProgram.setComputeUnitLimit({ units: unit_limit }),
      ComputeBudgetProgram.setComputeUnitPrice({ microLamports: unitPrice }),
      SystemProgram.transfer({
        fromPubkey: new PublicKey(quote.payer), //agent.wallet_address,
        toPubkey: FEE_ACCOUNT,
        lamports: quote.fee,
      }),
      new TransactionInstruction({
        keys: [],
        programId: MEMO_PROGRAM_ID,
        data: Buffer.from(btoa(JSON.stringify(quoteReq))),
      }),
    );

    const txn = await signTransaction(agent, transaction);

    const response = await sendTransaction(agent, txn);

    return response.signature;
  } catch (error: any) {
    throw new Error(`Fee payment failed: ${error.message}`);
  }
}

//Enables tokens to harvest token fees generated by the Transfer Fee extension.
/**
 * Submit fee claim transaction
 */
export async function fluxbeamSubmitFeeClaim(
  agent: SolanaAgentKit,
  payer: PublicKey,
  mint: PublicKey,
  priorityFee: number,
): Promise<string> {
  try {
    const transaction = new Transaction();
    const unitLimit = 160_000;
    const unitPrice = Math.floor(priorityFee / unitLimit);

    const dstAcc = getAssociatedTokenAddressSync(
      mint,
      payer,
      true,
      TOKEN_2022_PROGRAM_ID,
    );

    //build claim transaction
    transaction.add(
      ComputeBudgetProgram.setComputeUnitLimit({ units: unitLimit }),
      ComputeBudgetProgram.setComputeUnitPrice({
        microLamports: unitPrice,
      }),
      createWithdrawWithheldTokensFromMintInstruction(
        mint,
        dstAcc,
        payer,
        [],
        TOKEN_2022_PROGRAM_ID,
      ),
    );

    const txn = await signTransaction(agent, transaction);

    const response = await sendTransaction(agent, txn);

    return response.signature;
  } catch (error: any) {
    throw new Error(`Fee claim failed: ${error.message}`);
  }
}
