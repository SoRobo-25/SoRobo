import { ComputeBudgetProgram, PublicKey, Transaction } from "@solana/web3.js";
import {
  createWithdrawWithheldTokensFromMintInstruction,
  getAssociatedTokenAddressSync,
  TOKEN_2022_PROGRAM_ID,
} from "@solana/spl-token";
import { SolanaAgentKit } from "../../agent";
import { signTransaction, sendTransaction } from "../../utils/FluxbeamClient";

//Enables tokens to harvest token fees generated by the Transfer Fee extension from recipients of the mint .
/**
 * Submit fee claim transaction
 */
export async function fluxbeamSubmitFeeClaim(
  agent: SolanaAgentKit,
  payer: PublicKey,
  mint: PublicKey,
  priorityFee: number,
): Promise<string> {
  try {
    const transaction = new Transaction();
    const unitLimit = 160_000;
    const unitPrice = Math.floor(priorityFee / unitLimit);

    const dstAcc = getAssociatedTokenAddressSync(
      mint,
      payer,
      true,
      TOKEN_2022_PROGRAM_ID,
    );

    //build claim transaction
    transaction.add(
      ComputeBudgetProgram.setComputeUnitLimit({ units: unitLimit }),
      ComputeBudgetProgram.setComputeUnitPrice({
        microLamports: unitPrice,
      }),
      createWithdrawWithheldTokensFromMintInstruction(
        mint,
        dstAcc,
        payer,
        [],
        TOKEN_2022_PROGRAM_ID,
      ),
    );

    const txn = await signTransaction(agent, transaction);

    const response = await sendTransaction(agent, txn);

    return response.signature;
  } catch (error: any) {
    throw new Error(`Fee claim failed: ${error.message}`);
  }
}
